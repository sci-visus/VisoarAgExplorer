import math
import numpy as np
import argparse

BLACK_TARG_VALUES = [0.022019999999999998, 0.0217, 0.021400000000000002, 0.02112, 0.02104, 0.020870000000000003, 0.0207, 0.02052, 0.019790000000000002, 0.019459999999999998, 0.019459999999999998, 0.01956, 0.0196, 0.01963, 0.019790000000000002, 0.01956, 0.01966, 0.019710000000000002, 0.02465, 0.01399, 0.02338, 0.021949999999999997, 0.02146, 0.019379999999999998, 0.02099, 0.021019999999999997, 0.020870000000000003, 0.021339999999999998, 0.01887, 0.02076, 0.020019999999999996, 0.02062, 0.02033, 0.02043, 0.02081, 0.02088, 0.0209, 0.020630000000000003, 0.02046, 0.020630000000000003, 0.020560000000000002, 0.020659999999999998, 0.02051, 0.02073, 0.02059, 0.02067, 0.020720000000000002, 0.02068, 0.020710000000000003]
DARK_GREY_TARG_VALUES = [0.11091, 0.11764, 0.12793, 0.14189, 0.16035, 0.17428000000000002, 0.17865999999999999, 0.17965, 0.18948, 0.19649, 0.21095, 0.21288, 0.21443, 0.21566, 0.21709, 0.21821000000000002, 0.21966999999999998, 0.22036999999999998, 0.22425, 0.22073, 0.22640999999999997, 0.22268000000000002, 0.22837, 0.22934000000000002, 0.22963999999999998, 0.23199000000000003, 0.23294, 0.23223, 0.23342, 0.23537, 0.2366, 0.23732, 0.23897, 0.24001999999999998, 0.24159, 0.24242, 0.24349, 0.24442, 0.24574000000000001, 0.2469, 0.24812, 0.24911000000000003, 0.25026, 0.25155, 0.25268999999999997, 0.25359000000000004, 0.2546, 0.25556999999999996, 0.25623999999999997]
LIGHT_GREY_TARG_VALUES = [0.16253, 0.17094, 0.18308, 0.20024, 0.22163, 0.23785, 0.24242999999999998, 0.24411000000000002, 0.26031, 0.26352, 0.26248, 0.26274000000000003, 0.26203, 0.26178999999999997, 0.26318, 0.26535, 0.2681, 0.27151, 0.27536, 0.26874, 0.27786, 0.27442, 0.27549, 0.2762, 0.27672, 0.27919, 0.27832, 0.27903, 0.28018, 0.28119, 0.28159, 0.28248999999999996, 0.28311, 0.28413, 0.28531, 0.28576, 0.28643, 0.28734000000000004, 0.28776, 0.28894, 0.28977, 0.29072, 0.29152, 0.29248999999999997, 0.29309999999999997, 0.29372, 0.29451, 0.29491, 0.29534]
WHITE_TARG_VALUES = [0.53881, 0.54683, 0.55997, 0.5815899999999999, 0.61061, 0.65437, 0.7014900000000001, 0.73868, 0.8543000000000001, 0.8696299999999999, 0.87012, 0.8699899999999999, 0.8692799999999999, 0.86701, 0.8676, 0.8673000000000001, 0.86673, 0.86457, 0.8657699999999999, 0.86654, 0.86652, 0.86146, 0.86252, 0.86198, 0.86142, 0.85882, 0.85245, 0.84832, 0.84476, 0.8445199999999999, 0.84515, 0.8465699999999999, 0.84844, 0.84974, 0.84931, 0.8483499999999999, 0.84626, 0.84367, 0.84142, 0.8395999999999999, 0.83863, 0.83786, 0.83786, 0.83824, 0.8379300000000001, 0.8375199999999999, 0.83677, 0.83512, 0.8327800000000001]

TARG_VALUES_23 = [0.22201136000000002, 0.22376382, 0.22544516, 0.22683023, 0.22861184, 0.22977397, 0.23141822, 0.23249566000000002, 0.24057554, 0.23807635000000002, 0.23387094, 0.23341678000000002, 0.23318055999999998, 0.23243792, 0.23235213999999998, 0.23148812, 0.23130202, 0.23086471, 0.23032450000000002, 0.229651, 0.22920651, 0.22896485, 0.22837003, 0.22795518, 0.22749405, 0.2271947, 0.22659579999999999, 0.22214393999999998, 0.22171707999999998, 0.21997271999999998, 0.21851275, 0.21932264, 0.21953040000000001, 0.21837771, 0.21810175999999998, 0.21772313000000001, 0.21751877, 0.21742661, 0.21612801, 0.21547231, 0.21577739999999998, 0.21474337, 0.2155826, 0.21478079, 0.21481893, 0.21390874, 0.21282312, 0.21243074, 0.21231100000000003]
TARG_VALUES_51 = [0.46745317, 0.47222786, 0.47660651000000004, 0.48136753, 0.48581161, 0.48940425, 0.49283191000000004, 0.496102, 0.51497056, 0.52028228, 0.52161417, 0.52143758, 0.52136466, 0.52125157, 0.5211122, 0.52091372, 0.52060018, 0.52065753, 0.52061004, 0.52025026, 0.52014574, 0.52032583, 0.51984447, 0.51950608, 0.5194084999999999, 0.51893202, 0.51865292, 0.51211965, 0.51092096, 0.50982814, 0.50990568, 0.50944048, 0.50875917, 0.50862181, 0.50793468, 0.50762872, 0.50775054, 0.50737148, 0.50692755, 0.50606386, 0.50590106, 0.50590926, 0.50579569, 0.50520953, 0.50459002, 0.5040843, 0.5040705400000001, 0.50449362, 0.50324095]
TARG_VALUES_87 = [0.83859248, 0.84086053, 0.84459299, 0.84727813, 0.85003511, 0.85358745, 0.85652453, 0.85827138, 0.87289766, 0.87377596, 0.86095803, 0.8600565, 0.8568785699999999, 0.85498816, 0.85213172, 0.84911795, 0.8458298499999999, 0.84394757, 0.84162548, 0.84019987, 0.8398828, 0.8404128, 0.84302026, 0.8463514000000001, 0.8516692, 0.8570668499999999, 0.86392105, 0.86654369, 0.87206791, 0.8786481899999999, 0.8850054, 0.8909493, 0.89570368, 0.8990726800000001, 0.9025832300000001, 0.9072294, 0.91092359, 0.9131098299999999, 0.9166007500000001, 0.91882233, 0.92065113, 0.92371994, 0.9258126799999999, 0.92830855, 0.9296679299999999, 0.93011117, 0.93187785, 0.9345454, 0.93511134]

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-l','--list', help='display a list', required=True)
    parser.add_argument("--version", help="display a version", required=True)

    args = parser.parse_args()
    filter_values = [float(item) for item in args.list.split(',')]
    version = args.version
    calc_ref_values(filter_values, version)

def convert_to_decimal(values):
	return list(map(lambda x: x/100, values))

def weighted_average(target_values, filter_values):
	return sum(x * y for x, y in zip(target_values, filter_values)) / sum(filter_values)

def calc_ref_values(filter_values, version):
	filter_values = convert_to_decimal(filter_values)

	if version == "V2":
		black_ref_value = weighted_average(BLACK_TARG_VALUES, filter_values)
		dark_grey_ref_value = weighted_average(DARK_GREY_TARG_VALUES, filter_values)
		light_grey_ref_value = weighted_average(LIGHT_GREY_TARG_VALUES, filter_values)
		white_ref_value = weighted_average(WHITE_TARG_VALUES, filter_values)

		print([white_ref_value, light_grey_ref_value, dark_grey_ref_value, black_ref_value])

	elif version == "V1":
		ref_value_23 = weighted_average(TARG_VALUES_23, filter_values)
		ref_value_51 = weighted_average(TARG_VALUES_51, filter_values)
		ref_value_87 = weighted_average(TARG_VALUES_87, filter_values)

		print([ref_value_87, ref_value_51, ref_value_23])


if __name__ == '__main__':
	main()